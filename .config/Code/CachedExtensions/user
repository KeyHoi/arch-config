{"input":{"ourVersion":"1.19.0","commit":"816be6780ca8bd0ab80314e11478c48c70d09383","locale":"de","devMode":false,"absoluteFolderPath":"/home/keyhoi/.vscode/extensions","isBuiltin":false,"mtime":1515237678726},"result":[{"name":"python","displayName":"Python","description":"Linting, Debugging (multi-threaded, remote), Intellisense, code formatting, refactoring, unit tests, snippets, and more.","version":"0.9.1","publisher":"ms-python","author":{"name":"Microsoft Corporation"},"license":"MIT","homepage":"https://github.com/Microsoft/vscode-python","repository":{"type":"git","url":"https://github.com/Microsoft/vscode-python"},"bugs":{"url":"https://github.com/Microsoft/vscode-python/issues"},"icon":"icon.png","galleryBanner":{"color":"#1e415e","theme":"dark"},"engines":{"vscode":"^1.17.0"},"recommendations":["donjayamanne.jupyter"],"keywords":["python","django","unittest","multi-root ready"],"categories":["Languages","Debuggers","Linters","Snippets","Formatters","Other"],"activationEvents":["onLanguage:python","onCommand:python.execInTerminal","onCommand:python.sortImports","onCommand:python.runtests","onCommand:python.debugtests","onCommand:python.setInterpreter","onCommand:python.setShebangInterpreter","onCommand:python.viewTestUI","onCommand:python.viewTestOutput","onCommand:python.selectAndRunTestMethod","onCommand:python.selectAndDebugTestMethod","onCommand:python.selectAndRunTestFile","onCommand:python.runCurrentTestFile","onCommand:python.runFailedTests","onCommand:python.execSelectionInTerminal","onCommand:python.execSelectionInDjangoShell","onCommand:jupyter.runSelectionLine","onCommand:jupyter.execCurrentCell","onCommand:jupyter.execCurrentCellAndAdvance","onCommand:python.buildWorkspaceSymbols","onCommand:python.updateSparkLibrary","onCommand:python.startREPL","onCommand:python.goToPythonObject"],"main":"/home/keyhoi/.vscode/extensions/ms-python.python-0.9.1/out/client/extension","contributes":{"snippets":[{"language":"python","path":"./snippets/python.json"}],"keybindings":[{"command":"jupyter.runSelectionLine","key":"ctrl+alt+enter","when":"editorFocus && !replaceActive && !searchViewletVisible && !findWidgetVisible"}],"commands":[{"command":"python.sortImports","title":"Sort Imports","category":"Python Refactor"},{"command":"python.startREPL","title":"Start REPL","category":"Python"},{"command":"python.buildWorkspaceSymbols","title":"Build Workspace Symbols","category":"Python"},{"command":"python.runtests","title":"Run All Unit Tests","category":"Python"},{"command":"python.debugtests","title":"Debug All Unit Tests","category":"Python"},{"command":"python.execInTerminal","title":"Run Python File in Terminal","category":"Python"},{"command":"python.setInterpreter","title":"Select Interpreter","category":"Python"},{"command":"python.updateSparkLibrary","title":"Update Workspace PySpark Libraries","category":"Python"},{"command":"python.refactorExtractVariable","title":"Extract Variable","category":"Python Refactor"},{"command":"python.refactorExtractMethod","title":"Extract Method","category":"Python Refactor"},{"command":"python.viewTestOutput","title":"Show Unit Test Output","category":"Python"},{"command":"python.selectAndRunTestMethod","title":"Run Unit Test Method ...","category":"Python"},{"command":"python.selectAndDebugTestMethod","title":"Debug Unit Test Method ...","category":"Python"},{"command":"python.selectAndRunTestFile","title":"Run Unit Test File ...","category":"Python"},{"command":"python.runCurrentTestFile","title":"Run Current Unit Test File","category":"Python"},{"command":"python.runFailedTests","title":"Run Failed Unit Tests","category":"Python"},{"command":"python.execSelectionInTerminal","title":"Run Selection/Line in Python Terminal","category":"Python"},{"command":"python.execSelectionInDjangoShell","title":"Run Selection/Line in Django Shell","category":"Python"},{"command":"jupyter.runSelectionLine","title":"Run Selection/Line","category":"Jupyter"},{"command":"jupyter.execCurrentCell","title":"Run Cell","category":"Jupyter"},{"command":"jupyter.execCurrentCellAndAdvance","title":"Run Cell and Advance","category":"Jupyter"},{"command":"jupyter.gotToPreviousCell","title":"Go to Previous Cell","category":"Jupyter"},{"command":"jupyter.gotToNextCell","title":"Go to Next Cell","category":"Jupyter"},{"command":"python.goToPythonObject","title":"Go to Python Object","category":"Python"}],"menus":{"editor/context":[{"command":"python.refactorExtractVariable","title":"Refactor: Extract Variable","group":"Refactor","when":"editorHasSelection && editorLangId == python"},{"command":"python.refactorExtractMethod","title":"Refactor: Extract Method","group":"Refactor","when":"editorHasSelection && editorLangId == python"},{"command":"python.sortImports","title":"Refactor: Sort Imports","group":"Refactor","when":"editorLangId == python"},{"command":"python.execSelectionInTerminal","group":"Python","when":"editorHasSelection && editorLangId == python"},{"command":"python.execSelectionInDjangoShell","group":"Python","when":"editorHasSelection && editorLangId == python && python.isDjangoProject"},{"when":"resourceLangId == python","command":"python.execInTerminal","group":"Python"},{"when":"resourceLangId == python","command":"python.runCurrentTestFile","group":"Python"}],"explorer/context":[{"when":"resourceLangId == python","command":"python.runtests","group":"Python"},{"when":"resourceLangId == python","command":"python.debugtests","group":"Python"},{"when":"resourceLangId == python","command":"python.execInTerminal","group":"Python"}]},"debuggers":[{"type":"python","label":"Python","languages":["python"],"enableBreakpointsFor":{"languageIds":["python","html"]},"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","program":"./out/client/debugger/Main.js","runtime":"node","configurationSnippets":[{"label":"Python","description":"Debug a Python program with standard output","body":{"name":"Python","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"^\"\\${file}\"","cwd":"^\"\\${workspaceFolder}\"","env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":["RedirectOutput"]}},{"label":"Python: PySpark","description":"Debug PySpark","body":{"name":"PySpark","type":"python","request":"launch","stopOnEntry":true,"osx":{"pythonPath":"^\"\\${env:SPARK_HOME}/bin/spark-submit\""},"windows":{"pythonPath":"^\"\\${env:SPARK_HOME}/bin/spark-submit.cmd\""},"linux":{"pythonPath":"^\"\\${env:SPARK_HOME}/bin/spark-submit\""},"program":"^\"\\${file}\"","cwd":"^\"\\${workspaceFolder}\"","env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":["RedirectOutput"]}},{"label":"Python: Module","description":"Debug a Python Module","body":{"name":"Python Module","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","module":"module.name","cwd":"^\"\\${workspaceFolder}\"","env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":["RedirectOutput"]}},{"label":"Python: Terminal (integrated)","description":"Debug a Python program with Integrated Terminal/Console","body":{"name":"Integrated Terminal/Console","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"^\"\\${file}\"","cwd":"","console":"integratedTerminal","env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":[]}},{"label":"Python: Terminal (external)","description":"Debug a Python program with External Terminal/Console","body":{"name":"External Terminal/Console","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"^\"\\${file}\"","cwd":"","console":"externalTerminal","env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":[]}},{"label":"Python: Django","description":"Debug a Django Application","body":{"name":"Django","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"^\"\\${workspaceFolder}/manage.py\"","cwd":"^\"\\${workspaceFolder}\"","args":["runserver","--noreload","--nothreading"],"env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":["RedirectOutput","DjangoDebugging"]}},{"label":"Python: Flask (0.11.x or later)","description":"Debug a Flask Application","body":{"name":"Flask","type":"python","request":"launch","stopOnEntry":false,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"fully qualified path fo 'flask' executable. Generally located along with python interpreter","cwd":"^\"\\${workspaceFolder}\"","env":{"FLASK_APP":"^\"\\${workspaceFolder}/quickstart/app.py\""},"args":["run","--no-debugger","--no-reload"],"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":["RedirectOutput"]}},{"label":"Python: Flask (0.10.x or earlier)","description":"Debug an older styled Flask Application","body":{"name":"Flask (old)","type":"python","request":"launch","stopOnEntry":false,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"^\"\\${workspaceFolder}/run.py\"","cwd":"^\"\\${workspaceFolder}\"","args":[],"env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":["RedirectOutput"]}},{"label":"Python: Pyramid Application","description":"Debug a Pyramid Application","body":{"name":"Pyramid","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","cwd":"^\"\\${workspaceFolder}\"","env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","args":["^\"\\${workspaceFolder}/development.ini\""],"debugOptions":["RedirectOutput","Pyramid"]}},{"label":"Python: Watson Application","description":"Debug a Watson Application","body":{"name":"Watson","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"^\"\\${workspaceFolder}/console.py\"","cwd":"^\"\\${workspaceFolder}\"","args":["dev","runserver","--noreload=True"],"env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":["RedirectOutput"]}},{"label":"Python: Scrapy","description":"Scrapy with Integrated Terminal/Console","body":{"name":"Scrapy","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"^\"\\${config:python.pythonPath}\"","program":"~/.virtualenvs/scrapy/bin/scrapy","cwd":"^\"\\${workspaceFolder}\"","args":["crawl","specs","-o","bikes.json"],"console":"integratedTerminal","env":{},"envFile":"^\"\\${workspaceFolder}/.env\"","debugOptions":[]}},{"label":"Python: Attach","description":"Attach the debugger for remote debugging","body":{"name":"Attach (Remote Debug)","type":"python","request":"attach","localRoot":"^\"\\${workspaceFolder}\"","remoteRoot":"^\"\\${workspaceFolder}\"","port":3000,"secret":"my_secret","host":"localhost"}}],"configurationAttributes":{"launch":{"properties":{"module":{"type":"string","description":"Name of the module to be debugged.","default":""},"program":{"type":"string","description":"Absolute path to the program.","default":"${file}"},"pythonPath":{"type":"string","description":"Path (fully qualified) to python executable. Defaults to the value in settings.json","default":"${config:python.pythonPath}"},"args":{"type":"array","description":"Command line arguments passed to the program","default":[],"items":{"type":"string"}},"stopOnEntry":{"type":"boolean","description":"Automatically stop after launch.","default":true},"console":{"enum":["none","integratedTerminal","externalTerminal"],"description":"Where to launch the debug target: internal console, integrated terminal, or external terminal.","default":"none"},"cwd":{"type":"string","description":"Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).","default":""},"debugOptions":{"type":"array","description":"Advanced options, view read me for further details.","items":{"type":"string","enum":["RedirectOutput","DebugStdLib","BreakOnSystemExitZero","DjangoDebugging","Sudo","IgnoreDjangoTemplateWarnings","Pyramid"]},"default":["RedirectOutput"]},"exceptionHandling":{"description":"List of exception types and how they are handled during debugging (ignore, always break or break only if unhandled).","properties":{"ignore":{"type":"array","description":"Never break into these exceptions, e.g. 'copy.Error'","default":[],"items":{"type":"string"}},"always":{"type":"array","description":"Always break into these exceptions, e.g. 'copy.Error'","default":[],"items":{"type":"string"}},"unhandled":{"type":"array","description":"Break into these exceptions if they aren't handled, e.g. 'copy.Error'","default":[],"items":{"type":"string"}}}},"env":{"type":"object","description":"Environment variables defined as a key value pair. Property ends up being the Environment Variable and the value of the property ends up being the value of the Env Variable.","default":{}},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":""}}},"attach":{"required":["localRoot","remoteRoot"],"properties":{"localRoot":{"type":"string","description":"Local source root that corrresponds to the 'remoteRoot'.","default":"${workspaceFolder}"},"remoteRoot":{"type":"string","description":"The source root of the remote host.","default":""},"port":{"type":"number","description":"Debug port to attach","default":0},"host":{"type":"string","description":"IP Address of the of remote server (default is localhost or use 127.0.0.1).","default":"localhost"},"secret":{"type":"string","description":"Secret used to authenticate for remote debugging.","default":""}}}},"initialConfigurations":[{"name":"Python","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"${config:python.pythonPath}","program":"${file}","cwd":"${workspaceFolder}","env":{},"envFile":"${workspaceFolder}/.env","debugOptions":["RedirectOutput"]},{"name":"Python: Attach","type":"python","request":"attach","localRoot":"${workspaceFolder}","remoteRoot":"${workspaceFolder}","port":3000,"secret":"my_secret","host":"localhost"},{"name":"Python: Terminal (integrated)","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"${config:python.pythonPath}","program":"${file}","cwd":"","console":"integratedTerminal","env":{},"envFile":"${workspaceFolder}/.env","debugOptions":[]},{"name":"Python: Terminal (external)","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"${config:python.pythonPath}","program":"${file}","cwd":"","console":"externalTerminal","env":{},"envFile":"${workspaceFolder}/.env","debugOptions":[]},{"name":"Python: Django","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"${config:python.pythonPath}","program":"${workspaceFolder}/manage.py","cwd":"${workspaceFolder}","args":["runserver","--noreload","--nothreading"],"env":{},"envFile":"${workspaceFolder}/.env","debugOptions":["RedirectOutput","DjangoDebugging"]},{"name":"Python: Flask (0.11.x or later)","type":"python","request":"launch","stopOnEntry":false,"pythonPath":"${config:python.pythonPath}","program":"fully qualified path fo 'flask' executable. Generally located along with python interpreter","cwd":"${workspaceFolder}","env":{"FLASK_APP":"${workspaceFolder}/quickstart/app.py"},"args":["run","--no-debugger","--no-reload"],"envFile":"${workspaceFolder}/.env","debugOptions":["RedirectOutput"]},{"name":"Python: Flask (0.10.x or earlier)","type":"python","request":"launch","stopOnEntry":false,"pythonPath":"${config:python.pythonPath}","program":"${workspaceFolder}/run.py","cwd":"${workspaceFolder}","args":[],"env":{},"envFile":"${workspaceFolder}/.env","debugOptions":["RedirectOutput"]},{"name":"Python: PySpark","type":"python","request":"launch","stopOnEntry":true,"osx":{"pythonPath":"${env:SPARK_HOME}/bin/spark-submit"},"windows":{"pythonPath":"${env:SPARK_HOME}/bin/spark-submit.cmd"},"linux":{"pythonPath":"${env:SPARK_HOME}/bin/spark-submit"},"program":"${file}","cwd":"${workspaceFolder}","env":{},"envFile":"${workspaceFolder}/.env","debugOptions":["RedirectOutput"]},{"name":"Python: Module","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"${config:python.pythonPath}","module":"module.name","cwd":"${workspaceFolder}","env":{},"envFile":"${workspaceFolder}/.env","debugOptions":["RedirectOutput"]},{"name":"Python: Pyramid","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"${config:python.pythonPath}","cwd":"${workspaceFolder}","env":{},"envFile":"${workspaceFolder}/.env","args":["${workspaceFolder}/development.ini"],"debugOptions":["RedirectOutput","Pyramid"]},{"name":"Python: Watson","type":"python","request":"launch","stopOnEntry":true,"pythonPath":"${config:python.pythonPath}","program":"${workspaceFolder}/console.py","cwd":"${workspaceFolder}","args":["dev","runserver","--noreload=True"],"env":{},"envFile":"${workspaceFolder}/.env","debugOptions":["RedirectOutput"]}]}],"configuration":{"type":"object","title":"Python Configuration","properties":{"python.pythonPath":{"type":"string","default":"python","description":"Path to Python, you can use a custom version of Python by modifying this setting to include the full path.","scope":"resource"},"python.venvPath":{"type":"string","default":"","description":"Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).","scope":"resource"},"python.envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":"${workspaceFolder}/.env","scope":"resource"},"python.jediPath":{"type":"string","default":"","description":"Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory).","scope":"resource"},"python.sortImports.path":{"type":"string","description":"Path to isort script, default using inner version","default":"","scope":"resource"},"python.sortImports.args":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.disablePromptForFeatures":{"type":"array","default":[],"description":"Do not display a prompt to install these features","items":{"type":"string","default":"pylint","description":"Feature","enum":["flake8","mypy","pep8","pylama","prospector","pydocstyle","pylint"]},"scope":"resource"},"python.linting.enabled":{"type":"boolean","default":true,"description":"Whether to lint Python files.","scope":"resource"},"python.linting.enabledWithoutWorkspace":{"type":"boolean","default":true,"description":"Whether to lint Python files when no workspace is opened.","scope":"resource"},"python.linting.prospectorEnabled":{"type":"boolean","default":false,"description":"Whether to lint Python files using prospector.","scope":"resource"},"python.linting.pylintEnabled":{"type":"boolean","default":true,"description":"Whether to lint Python files using pylint.","scope":"resource"},"python.linting.pep8Enabled":{"type":"boolean","default":false,"description":"Whether to lint Python files using pep8","scope":"resource"},"python.linting.flake8Enabled":{"type":"boolean","default":false,"description":"Whether to lint Python files using flake8","scope":"resource"},"python.linting.pydocstyleEnabled":{"type":"boolean","default":false,"description":"Whether to lint Python files using pydocstyle","scope":"resource"},"python.linting.mypyEnabled":{"type":"boolean","default":false,"description":"Whether to lint Python files using mypy.","scope":"resource"},"python.linting.lintOnSave":{"type":"boolean","default":true,"description":"Whether to lint Python files when saved.","scope":"resource"},"python.linting.maxNumberOfProblems":{"type":"number","default":100,"description":"Controls the maximum number of problems produced by the server.","scope":"resource"},"python.linting.pylintCategorySeverity.convention":{"type":"string","default":"Information","description":"Severity of Pylint message type 'Convention/C'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.pylintCategorySeverity.refactor":{"type":"string","default":"Hint","description":"Severity of Pylint message type 'Refactor/R'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.pylintCategorySeverity.warning":{"type":"string","default":"Warning","description":"Severity of Pylint message type 'Warning/W'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.pylintCategorySeverity.error":{"type":"string","default":"Error","description":"Severity of Pylint message type 'Error/E'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.pylintCategorySeverity.fatal":{"type":"string","default":"Error","description":"Severity of Pylint message type 'Fatal/F'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.pep8CategorySeverity.W":{"type":"string","default":"Warning","description":"Severity of Pep8 message type 'W'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.pep8CategorySeverity.E":{"type":"string","default":"Error","description":"Severity of Pep8 message type 'E'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.flake8CategorySeverity.F":{"type":"string","default":"Error","description":"Severity of Flake8 message type 'F'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.flake8CategorySeverity.E":{"type":"string","default":"Error","description":"Severity of Flake8 message type 'E'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.flake8CategorySeverity.W":{"type":"string","default":"Warning","description":"Severity of Flake8 message type 'W'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.mypyCategorySeverity.error":{"type":"string","default":"Error","description":"Severity of Mypy message type 'Error'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.mypyCategorySeverity.note":{"type":"string","default":"Information","description":"Severity of Mypy message type 'Note'.","enum":["Hint","Error","Information","Warning"],"scope":"resource"},"python.linting.prospectorPath":{"type":"string","default":"prospector","description":"Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.","scope":"resource"},"python.linting.pylintPath":{"type":"string","default":"pylint","description":"Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.","scope":"resource"},"python.linting.pep8Path":{"type":"string","default":"pep8","description":"Path to pep8, you can use a custom version of pep8 by modifying this setting to include the full path.","scope":"resource"},"python.linting.flake8Path":{"type":"string","default":"flake8","description":"Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.","scope":"resource"},"python.linting.pydocstylePath":{"type":"string","default":"pydocstyle","description":"Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.","scope":"resource"},"python.linting.mypyPath":{"type":"string","default":"mypy","description":"Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.","scope":"resource"},"python.linting.prospectorArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.linting.pylintArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.linting.pep8Args":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.linting.flake8Args":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.linting.pydocstyleArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.linting.mypyArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":["--ignore-missing-imports","--follow-imports=silent"],"items":{"type":"string"},"scope":"resource"},"python.formatting.provider":{"type":"string","default":"autopep8","description":"Provider for formatting. Possible options include 'autopep8' and 'yapf'.","enum":["autopep8","yapf","none"],"scope":"resource"},"python.formatting.autopep8Path":{"type":"string","default":"autopep8","description":"Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.","scope":"resource"},"python.formatting.yapfPath":{"type":"string","default":"yapf","description":"Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.","scope":"resource"},"python.formatting.autopep8Args":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.formatting.yapfArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.autoComplete.preloadModules":{"type":"array","items":{"type":"string"},"default":[],"description":"Comma delimited list of modules preloaded to speed up Auto Complete (e.g. add Numpy, Pandas, etc, items slow to load when autocompleting).","scope":"resource"},"python.autoComplete.extraPaths":{"type":"array","default":[],"description":"List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.","scope":"resource"},"python.autoComplete.addBrackets":{"type":"boolean","default":false,"description":"Automatically add brackets for functions.","scope":"resource"},"python.workspaceSymbols.tagFilePath":{"type":"string","default":"${workspaceFolder}/.vscode/tags","description":"Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.","scope":"resource"},"python.workspaceSymbols.enabled":{"type":"boolean","default":true,"description":"Set to 'false' to disable Workspace Symbol provider using ctags.","scope":"resource"},"python.workspaceSymbols.rebuildOnStart":{"type":"boolean","default":true,"description":"Whether to re-build the tags file on start (defaults to true).","scope":"resource"},"python.workspaceSymbols.rebuildOnFileSave":{"type":"boolean","default":true,"description":"Whether to re-build the tags file on when changes made to python files are saved.","scope":"resource"},"python.workspaceSymbols.ctagsPath":{"type":"string","default":"ctags","description":"Fully qualilified path to the ctags executable (else leave as ctags, assuming it is in current path).","scope":"resource"},"python.workspaceSymbols.exclusionPatterns":{"type":"array","default":["**/site-packages/**"],"items":{"type":"string"},"description":"Pattern used to exclude files and folders from ctags See http://ctags.sourceforge.net/ctags.html.","scope":"resource"},"python.unitTest.promptToConfigure":{"type":"boolean","default":true,"description":"Where to prompt to configure a test framework if potential tests directories are discovered.","scope":"resource"},"python.unitTest.debugPort":{"type":"number","default":3000,"description":"Port number used for debugging of unittests.","scope":"resource"},"python.unitTest.cwd":{"type":"string","default":null,"description":"Optional working directory for unit tests.","scope":"resource"},"python.unitTest.nosetestsEnabled":{"type":"boolean","default":false,"description":"Whether to enable or disable unit testing using nosetests.","scope":"resource"},"python.unitTest.nosetestPath":{"type":"string","default":"nosetests","description":"Path to nosetests, you can use a custom version of nosetests by modifying this setting to include the full path.","scope":"resource"},"python.unitTest.pyTestEnabled":{"type":"boolean","default":false,"description":"Whether to enable or disable unit testing using pytest.","scope":"resource"},"python.unitTest.pyTestPath":{"type":"string","default":"pytest","description":"Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.","scope":"resource"},"python.unitTest.nosetestArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.unitTest.pyTestArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.unitTest.unittestEnabled":{"type":"boolean","default":false,"description":"Whether to enable or disable unit testing using unittest.","scope":"resource"},"python.unitTest.unittestArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":["-v","-s",".","-p","*test*.py"],"items":{"type":"string"},"scope":"resource"},"python.linting.ignorePatterns":{"type":"array","description":"Patterns used to exclude files or folders from being linted.","default":[".vscode/*.py","**/site-packages/**/*.py"],"items":{"type":"string"},"scope":"resource"},"python.linting.pylamaEnabled":{"type":"boolean","default":false,"description":"Whether to lint Python files using pylama.","scope":"resource"},"python.linting.pylamaPath":{"type":"string","default":"pylama","description":"Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.","scope":"resource"},"python.linting.pylamaArgs":{"type":"array","description":"Arguments passed in. Each argument is a separate item in the array.","default":[],"items":{"type":"string"},"scope":"resource"},"python.terminal.executeInFileDir":{"type":"boolean","default":false,"description":"When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.","scope":"resource"},"python.terminal.launchArgs":{"type":"array","default":[],"description":"Python launch arguments to use when executing a file in the terminal.","scope":"resource"}}},"languages":[{"id":"pip-requirements","aliases":["pip requirements","requirements.txt"],"filenames":["requirements.txt"],"filenamePatterns":["*-requirements.txt","requirements-*.txt"],"configuration":"./languages/pip-requirements.json"},{"id":"yaml","filenames":[".condarc"]}],"grammars":[{"language":"pip-requirements","scopeName":"source.pip-requirements","path":"./syntaxes/pip-requirements.tmLanguage.json"}],"jsonValidation":[{"fileMatch":".condarc","url":"./schemas/condarc.json"},{"fileMatch":"environment.yml","url":"./schemas/conda-environment.json"},{"fileMatch":"meta.yaml","url":"./schemas/conda-meta.json"}],"yamlValidation":[{"fileMatch":".condarc","url":"./schemas/condarc.json"},{"fileMatch":"environment.yml","url":"./schemas/conda-environment.json"},{"fileMatch":"meta.yaml","url":"./schemas/conda-meta.json"}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install","test":"node ./out/test/standardTest.js && node ./out/test/multiRootTest.js","precommit":"node gulpfile.js","lint-staged":"node gulpfile.js","lint":"tslint src/**/*.ts -t verbose"},"dependencies":{"diff-match-patch":"^1.0.0","fs-extra":"^4.0.2","fuzzy":"^0.1.3","get-port":"^3.2.0","iconv-lite":"^0.4.19","inversify":"^4.5.2","line-by-line":"^0.1.5","lodash":"^4.17.4","minimatch":"^3.0.3","named-js-regexp":"^1.3.1","reflect-metadata":"^0.1.10","rxjs":"^5.5.2","semver":"^5.4.1","tmp":"0.0.29","tree-kill":"^1.1.0","typescript-char":"^0.0.0","uint64be":"^1.0.1","untildify":"^3.0.2","vscode-debugadapter":"^1.0.1","vscode-debugprotocol":"^1.0.1","vscode-extension-telemetry":"^0.0.5","vscode-languageclient":"^3.1.0","vscode-languageserver":"^3.1.0","winreg":"^1.2.4","xml2js":"^0.4.17"},"devDependencies":{"@types/chai":"4.0.6","@types/chai-as-promised":"^7.1.0","@types/fs-extra":"^4.0.2","@types/get-port":"^3.2.0","@types/iconv-lite":"0.0.1","@types/lodash":"^4.14.74","@types/mocha":"^2.2.43","@types/node":"^6.0.40","@types/semver":"^5.4.0","@types/sinon":"^2.3.2","@types/uuid":"^3.3.27","@types/winreg":"^1.2.30","@types/xml2js":"^0.4.0","chai":"^4.1.2","chai-as-promised":"^7.1.1","colors":"^1.1.2","debounce":"^1.1.0","event-stream":"^3.3.4","gulp":"^3.9.1","gulp-debounced-watch":"^1.0.4","gulp-filter":"^5.0.1","gulp-gitmodified":"^1.1.1","gulp-typescript":"^3.2.2","gulp-watch":"^4.3.11","husky":"^0.14.3","mocha":"^2.3.3","relative":"^3.0.2","retyped-diff-match-patch-tsd-ambient":"^1.0.0-0","sinon":"^2.3.6","tslint":"^5.7.0","tslint-eslint-rules":"^4.1.1","tslint-microsoft-contrib":"^5.0.1","typescript":"^2.6.2","typescript-formatter":"^6.0.0","vscode":"^1.1.5"},"uuid":"f1f59ae4-9318-4f3c-a9b5-81b2eaa5f8a5","isBuiltin":false,"id":"ms-python.python","extensionFolderPath":"/home/keyhoi/.vscode/extensions/ms-python.python-0.9.1"},{"name":"cpptools","displayName":"C/C++","description":"C/C++ IntelliSense, debugging, and code browsing.","version":"0.14.5","publisher":"ms-vscode","preview":true,"icon":"LanguageCCPP_color_128x.png","readme":"README.md","author":{"name":"Microsoft Corporation"},"license":"SEE LICENSE IN LICENSE.txt","engines":{"vscode":"^1.17.0"},"bugs":{"url":"https://github.com/Microsoft/vscode-cpptools/issues","email":"c_cpp_support@microsoft.com"},"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-cpptools.git"},"homepage":"https://github.com/Microsoft/vscode-cpptools","qna":"https://github.com/Microsoft/vscode-cpptools/issues","keywords":["C","C++","IntelliSense","Microsoft","multi-root ready"],"categories":["Languages","Debuggers","Formatters","Linters"],"activationEvents":["onLanguage:cpp","onLanguage:c","onCommand:extension.pickNativeProcess","onCommand:extension.pickRemoteNativeProcess","onCommand:C_Cpp.ConfigurationEdit","onCommand:C_Cpp.ConfigurationSelect","onCommand:C_Cpp.SwitchHeaderSource","onCommand:C_Cpp.Navigate","onCommand:C_Cpp.GoToDeclaration","onCommand:C_Cpp.PeekDeclaration","onCommand:C_Cpp.ToggleErrorSquiggles","onCommand:C_Cpp.ToggleIncludeFallback","onCommand:C_Cpp.ShowReleaseNotes","onCommand:C_Cpp.ResetDatabase","onCommand:C_Cpp.PauseParsing","onCommand:C_Cpp.ResumeParsing","onCommand:C_Cpp.ShowParsingCommands","onCommand:C_Cpp.TakeSurvey","onDebug"],"main":"/home/keyhoi/.vscode/extensions/ms-vscode.cpptools-0.14.5/out/src/main","contributes":{"problemMatchers":[{"name":"gcc","owner":"cpptools","fileLocation":["relative","${workspaceRoot}"],"pattern":{"regexp":"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$","file":1,"line":2,"column":3,"severity":4,"message":5}}],"configuration":{"type":"object","title":"C/C++ Configuration","properties":{"C_Cpp.clang_format_path":{"type":["string","null"],"default":null,"description":"The full path of the clang-format executable.","scope":"resource"},"C_Cpp.clang_format_style":{"type":"string","default":"file","description":"Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use \"file\" to load the style from a .clang-format file in the current or parent directory. Use \"{key: value, ...}\" to set specific parameters, e.g.: \"{ BasedOnStyle: LLVM, IndentWidth: 8 }\"","scope":"resource"},"C_Cpp.clang_format_fallbackStyle":{"type":"string","default":"Visual Studio","description":"Name of the predefined style used as a fallback in case clang-format is invoked with style \"file\" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use \"{key: value, ...}\" to set specific parameters, e.g.: \"{ BasedOnStyle: LLVM, IndentWidth: 8 }\"","scope":"resource"},"C_Cpp.clang_format_sortIncludes":{"type":["boolean","null"],"enum":[true,false,null],"default":null,"description":"If set, overrides the include sorting behavior determined by the SortIncludes parameter.","scope":"resource"},"C_Cpp.intelliSenseEngine":{"type":"string","enum":["Default","Tag Parser"],"default":"Default","description":"Controls the IntelliSense provider. \"Tag Parser\" provides \"fuzzy\" results that are not context-aware. \"Default\" provides context-aware results and is in preview mode - member list, hover tooltips, and error squiggles are currently implemented. Features not yet implemented in the new default engine will use the tag parser engine instead.","scope":"resource"},"C_Cpp.intelliSenseEngineFallback":{"type":"string","enum":["Enabled","Disabled"],"default":"Enabled","description":"Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.","scope":"resource"},"C_Cpp.autocomplete":{"type":"string","enum":["Default","Disabled"],"default":"Default","description":"Controls the auto-completion provider. \"Default\" uses the active IntelliSense engine. \"Disabled\" uses the word-based completion provided by Visual Studio Code.","scope":"resource"},"C_Cpp.errorSquiggles":{"type":"string","enum":["Enabled","Disabled"],"default":"Enabled","description":"Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. Warnings about #includes that could not be located will always be reported to the editor. This setting is ignored by the Tag Parser engine.","scope":"resource"},"C_Cpp.formatting":{"type":"string","enum":["Default","Disabled"],"default":"Default","description":"\"Default\" enables code formatting. \"Disabled\" disables code formatting.","scope":"resource"},"C_Cpp.navigation.length":{"type":"number","default":60,"description":"Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.","scope":"resource"},"C_Cpp.loggingLevel":{"type":"string","enum":["None","Error","Warning","Information"],"default":"Error","description":"The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information.","scope":"resource"}}},"commands":[{"command":"C_Cpp.ConfigurationSelect","title":"Select a Configuration...","category":"C/Cpp"},{"command":"C_Cpp.ConfigurationEdit","title":"Edit Configurations...","category":"C/Cpp"},{"command":"C_Cpp.GoToDeclaration","title":"Go to Declaration","category":"C/Cpp"},{"command":"C_Cpp.PeekDeclaration","title":"Peek Declaration","category":"C/Cpp"},{"command":"C_Cpp.SwitchHeaderSource","title":"Switch Header/Source","category":"C/Cpp"},{"command":"C_Cpp.Navigate","title":"Navigate...","category":"C/Cpp"},{"command":"C_Cpp.ToggleErrorSquiggles","title":"Toggle Error Squiggles","category":"C/Cpp"},{"command":"C_Cpp.ToggleIncludeFallback","title":"Toggle IntelliSense Engine Fallback on Include Errors","category":"C/Cpp"},{"command":"workbench.action.gotoSymbol","title":"Go to Symbol in File..."},{"command":"workbench.action.showAllSymbols","title":"Go to Symbol in Workspace..."},{"command":"C_Cpp.ShowReleaseNotes","title":"Show Release Notes","category":"C/Cpp"},{"command":"C_Cpp.ResetDatabase","title":"Reset IntelliSense Database","category":"C/Cpp"},{"command":"C_Cpp.PauseParsing","title":"Pause Parsing","category":"C/Cpp"},{"command":"C_Cpp.ResumeParsing","title":"Resume Parsing","category":"C/Cpp"},{"command":"C_Cpp.ShowParsingCommands","title":"Show Parsing Commands","category":"C/Cpp"},{"command":"C_Cpp.TakeSurvey","title":"Take Survey","category":"C/Cpp"}],"keybindings":[{"command":"C_Cpp.GoToDeclaration","key":"Ctrl+F12","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.GoToDeclaration","key":"Ctrl+F12","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.PeekDeclaration","key":"Ctrl+Alt+F12","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.PeekDeclaration","key":"Ctrl+Alt+F12","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.SwitchHeaderSource","key":"Alt+O","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.SwitchHeaderSource","key":"Alt+O","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.Navigate","key":"Alt+N","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.Navigate","key":"Alt+N","when":"editorTextFocus && editorLangId == 'c'"}],"debuggers":[{"type":"cppdbg","label":"C++ (GDB/LLDB)","enableBreakpointsFor":{"languageIds":["c","cpp"]},"program":"./debugAdapters/OpenDebugAD7","aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","variables":{"pickProcess":"extension.pickNativeProcess","pickRemoteProcess":"extension.pickRemoteNativeProcess"},"configurationAttributes":{"launch":{"required":["name","type","request","program"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"cwd":{"type":"string","description":"The working directory of the target","default":".","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":"false"}}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":""}}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":"false","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"windows":{"type":"object","description":"Windows-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":"false"}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":""}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true"},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false"},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"osx":{"type":"object","description":"OS X-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":"false"}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":""}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true"},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false"},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"linux":{"type":"object","description":"Linux-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":"false"}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":""}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true"},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false"},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"additionalProperties":false,"type":"object"},"attach":{"required":["name","type","request","program","processId"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"windows":{"type":"object","description":"Windows-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true"},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true"},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"osx":{"type":"object","description":"OS X-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true"},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true"},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"linux":{"type":"object","description":"Linux-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"type":{"enum":["cppdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":"true"},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":"true"},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"additionalProperties":false,"type":"object"}},"configurationSnippets":[{"label":"C/C++: (gdb) Launch","description":"Launch with gdb.","bodyText":"{\n\t\"name\": \"(gdb) Launch\",\n\t\"type\": \"cppdbg\",\n\t\"request\": \"launch\",\n\t\"program\": \"enter program name, for example \\${workspaceFolder}/a.out\",\n\t\"args\": [],\n\t\"stopAtEntry\": false,\n\t\"cwd\": \"\\${workspaceFolder}\",\n\t\"environment\": [],\n\t\"externalConsole\": true,\n\t\"MIMode\": \"gdb\",\n\t\"setupCommands\": [\n\t    {\n\t        \"description\": \"Enable pretty-printing for gdb\",\n\t        \"text\": \"-enable-pretty-printing\",\n\t        \"ignoreFailures\": true\n\t    }\n\t]\n}"},{"label":"C/C++: (gdb) Attach","description":"Attach with gdb.","bodyText":"{ \n\t\"name\": \"(gdb) Attach\",\n\t\"type\": \"cppdbg\",\n\t\"request\": \"attach\",\n\t\"program\": \"enter program name, for example \\${workspaceFolder}/a.out\",\n\t\"processId\": \"\\${command:pickProcess}\",\n\t\"MIMode\": \"gdb\"\n}"},{"label":"C/C++: (gdb) Pipe Launch","description":"Pipe Launch with gdb.","bodyText":"{\n\t\"name\": \"(gdb) Pipe Launch\",\n\t\"type\": \"cppdbg\",\n\t\"request\": \"launch\",\n\t\"program\": \"enter program name, for example \\${workspaceFolder}/a.out\",\n\t\"args\": [],\n\t\"stopAtEntry\": false,\n\t\"cwd\": \"\\${workspaceFolder}\",\n\t\"environment\": [],\n\t\"externalConsole\": true,\n\t\"pipeTransport\": {\n\t\t\"debuggerPath\": \"/usr/bin/gdb\",\n\t\t\"pipeProgram\": \"/usr/bin/ssh\",\n\t\t\"pipeArgs\": [],\n\t\t\"pipeCwd\": \"\"\n\t},\n\t\"MIMode\": \"gdb\",\n\t\"setupCommands\": [\n\t    {\n\t        \"description\": \"Enable pretty-printing for gdb\",\n\t        \"text\": \"-enable-pretty-printing\",\n\t        \"ignoreFailures\": true\n\t    }\n\t]\n}"},{"label":"C/C++: (gdb) Pipe Attach","description":"Pipe Attach with gdb.","bodyText":"{\n\t\"name\": \"(gdb) Pipe Attach\",\n\t\"type\": \"cppdbg\",\n\t\"request\": \"attach\",\n\t\"program\": \"enter program name, for example \\${workspaceFolder}/a.out\",\n\t\"processId\": \"\\${command:pickRemoteProcess}\",\n\t\"pipeTransport\": {\n\t\t\"debuggerPath\": \"/usr/bin/gdb\",\n\t\t\"pipeProgram\": \"/usr/bin/ssh\",\n\t\t\"pipeArgs\": [],\n\t\t\"pipeCwd\": \"\"\n\t},\n\t\"MIMode\": \"gdb\"\n}"}],"windows":{"program":"./debugAdapters/bin/OpenDebugAD7.exe"}},{"type":"cppvsdbg","label":"C++ (Windows)","enableBreakpointsFor":{"languageIds":["c","cpp"]},"runtime":"node","program":"./out/src/Debugger/Proxy/debugProxy.js","args":["--interpreter=vscode"],"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","variables":{"pickProcess":"extension.pickNativeProcess"},"configurationAttributes":{"launch":{"required":["name","type","request","program","cwd"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":"false","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"windows":{"type":"object","description":"Windows-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":""},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"osx":{"type":"object","description":"OS X-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":""},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"linux":{"type":"object","description":"Linux-spezifische Startkonfigurationsattribute.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":""},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":"false"},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["launch"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"additionalProperties":false,"type":"object"},"attach":{"required":["name","type","request","processId"],"properties":{"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"windows":{"type":"object","description":"Windows-spezifische Startkonfigurationsattribute.","properties":{"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"osx":{"type":"object","description":"OS X-spezifische Startkonfigurationsattribute.","properties":{"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."},"linux":{"type":"object","description":"Linux-spezifische Startkonfigurationsattribute.","properties":{"type":{"enum":["cppvsdbg"],"description":"Der Typ der Konfiguration.","pattern":"^(?!node2)","errorMessage":"Dieser Debugging-Typ wurde nicht erkannt. Bitte installieren und aktivieren Sie die dazugehörige Debugging-Erweiterung.","patternErrorMessage":"\"node2\" wird nicht mehr unterstützt, verwenden Sie stattdessen \"node\", und legen Sie das Attribut \"protocol\" auf \"inspector\" fest."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Der Name der Konfiguration. Er wird im Dropdownmenü der Startkonfiguration angezeigt.","default":"Launch"},"request":{"enum":["attach"],"description":"Der Anforderungstyp der Konfiguration. Der Wert kann \"launch\" oder \"attach\" sein."},"debugServer":{"type":"number","description":"Nur für die Entwicklung von Debugerweiterungen: Wenn ein Port angegeben ist, versucht der VS-Code, eine Verbindung mit einem Debugadapter herzustellen, der im Servermodus ausgeführt wird.","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Ein Task, der ausgeführt werden soll, bevor die Debugsitzung beginnt."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Steuert das Verhalten der internen Debugging-Konsole.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"\"env.\", \"config.\" und \"command.\" sind veraltet, verwenden Sie stattdessen \"env:\", \"config:\" und \"command:\"."}},"additionalProperties":false,"type":"object"}}}],"jsonValidation":[{"fileMatch":"c_cpp_properties.json","url":"./c_cpp_properties.schema.json"}],"menus":{"editor/context":[{"when":"editorLangId == c","command":"C_Cpp.GoToDeclaration","group":"navigation@2"},{"when":"editorLangId == cpp","command":"C_Cpp.GoToDeclaration","group":"navigation@2"},{"when":"editorLangId == c","command":"C_Cpp.PeekDeclaration","group":"navigation@3"},{"when":"editorLangId == cpp","command":"C_Cpp.PeekDeclaration","group":"navigation@3"},{"when":"editorLangId == c","command":"C_Cpp.SwitchHeaderSource","group":"other@1"},{"when":"editorLangId == cpp","command":"C_Cpp.SwitchHeaderSource","group":"other@1"},{"when":"editorLangId == c","command":"C_Cpp.Navigate","group":"other@2"},{"when":"editorLangId == cpp","command":"C_Cpp.Navigate","group":"other@2"},{"when":"editorLangId == c","command":"workbench.action.gotoSymbol","group":"other@3"},{"when":"editorLangId == cpp","command":"workbench.action.gotoSymbol","group":"other@3"},{"when":"editorLangId == c","command":"workbench.action.showAllSymbols","group":"other@4"},{"when":"editorLangId == cpp","command":"workbench.action.showAllSymbols","group":"other@4"}]},"configurationDefaults":{"[cpp]":{"editor.autoIndent":false},"[c]":{"editor.autoIndent":false}}},"scripts":{"vscode:prepublish":"tsc -p ./ && node ./out/src/Debugger/copyScript.js","pretest":"tsc -p ./","test":"mocha -u tdd ./out/test","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"typescript":"^2.5.3","vscode":"^1.1.6","mocha":"^4.0.1","@types/node":"^8.0.46","@types/mocha":"^2.2.43"},"dependencies":{"vscode-languageclient":"~3.4.5","vscode-extension-telemetry":"~0.0.8","http-proxy-agent":"~2.0.0","https-proxy-agent":"~2.1.0","tmp":"~0.0.33","yauzl":"~2.8.0","mkdirp":"~0.5.1","vscode-debugprotocol":"~1.24.0","vscode-debugadapter":"~1.24.0"},"runtimeDependencies":[{"description":"C/C++ language components (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?linkid=865202","platforms":["linux"],"architectures":["x86_64"],"binaries":["./bin/Microsoft.VSCode.CPP.Extension.linux","./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"]},{"description":"C/C++ language components (Linux / x86)","url":"https://go.microsoft.com/fwlink/?linkid=865204","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["./bin/Microsoft.VSCode.CPP.Extension.linux","./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"]},{"description":"C/C++ language components (OS X)","url":"https://go.microsoft.com/fwlink/?linkid=865206","platforms":["darwin"],"binaries":["./bin/Microsoft.VSCode.CPP.Extension.darwin","./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.darwin"]},{"description":"C/C++ language components (Windows)","url":"https://go.microsoft.com/fwlink/?linkid=865207","platforms":["win32"],"binaries":[]},{"description":"ClangFormat (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?LinkID=848955","platforms":["linux"],"architectures":["x86_64"],"binaries":["./LLVM/bin/clang-format"]},{"description":"ClangFormat (Linux / x86)","url":"https://go.microsoft.com/fwlink/?LinkID=864640","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["./LLVM/bin/clang-format"]},{"description":"ClangFormat (OS X)","url":"https://go.microsoft.com/fwlink/?LinkID=848956","platforms":["darwin"],"binaries":["./LLVM/bin/clang-format.darwin"]},{"description":"ClangFormat (Windows)","url":"https://go.microsoft.com/fwlink/?LinkID=848957","platforms":["win32"],"binaries":[]},{"description":"Mono Framework Assemblies","url":"https://go.microsoft.com/fwlink/?LinkId=816539","platforms":["linux","darwin"],"binaries":[]},{"description":"Mono Runtime (Linux / x86)","url":"https://go.microsoft.com/fwlink/?LinkId=816540","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["./debugAdapters/mono.linux-x86"]},{"description":"Mono Runtime (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?LinkId=816541","platforms":["linux"],"architectures":["x86_64"],"binaries":["./debugAdapters/mono.linux-x86_64"]},{"description":"Mono Runtime (OS X)","url":"https://go.microsoft.com/fwlink/?LinkId=816542","platforms":["darwin"],"binaries":["./debugAdapters/mono.osx"]},{"description":"LLDB 3.8.0 (OS X)","url":"https://go.microsoft.com/fwlink/?LinkID=817244","platforms":["darwin"],"binaries":["./debugAdapters/lldb/bin/debugserver","./debugAdapters/lldb/bin/lldb-mi","./debugAdapters/lldb/bin/lldb-argdumper","./debugAdapters/lldb/bin/lldb-launcher"]},{"description":"Visual Studio Windows Debugger","url":"https://go.microsoft.com/fwlink/?linkid=852926","platforms":["win32"],"binaries":[]}],"uuid":"690b692e-e8a9-493f-b802-8089d50ac1b2","isBuiltin":false,"id":"ms-vscode.cpptools","extensionFolderPath":"/home/keyhoi/.vscode/extensions/ms-vscode.cpptools-0.14.5"},{"name":"vim","displayName":"Vim","description":"Vim emulation for Visual Studio Code","icon":"images/icon.png","version":"0.10.8","publisher":"vscodevim","galleryBanner":{"color":"#e3f4ff","theme":"light"},"license":"MIT","keywords":["vim","vi","vscodevim"],"repository":{"type":"git","url":"https://github.com/VSCodeVim/Vim.git"},"homepage":"https://github.com/VSCodeVim/Vim","bugs":{"url":"https://github.com/VSCodeVim/Vim/issues"},"engines":{"vscode":"^1.17.0"},"categories":["Other","Keymaps"],"activationEvents":["*"],"qna":"https://vscodevim-slackin.azurewebsites.net/","main":"/home/keyhoi/.vscode/extensions/vscodevim.vim-0.10.8/out/extension","contributes":{"commands":[{"command":"extension.showCmdLine","title":"Vim: Show Command Line"},{"command":"vim.remap","title":"Vim: Remap any key combination that VS Code supports to Vim motions/operators/ExCommands/macro."},{"command":"toggleVim","title":"Vim: Toggle Vim Mode"}],"keybindings":[{"key":"Escape","command":"extension.vim_escape","when":"editorTextFocus && vim.active && !inDebugRepl"},{"key":"Home","command":"extension.vim_home","when":"editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"},{"key":"End","command":"extension.vim_end","when":"editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"},{"key":"cmd+left","command":"extension.vim_cmd+left","when":"editorTextFocus && vim.active && vim.use<D-left> && !inDebugRepl && vim.mode != 'Insert'"},{"key":"cmd+right","command":"extension.vim_cmd+right","when":"editorTextFocus && vim.active && vim.use<D-right> &&  !inDebugRepl && vim.mode != 'Insert'"},{"key":"cmd+d","command":"extension.vim_cmd+d","when":"editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"},{"key":"cmd+a","command":"extension.vim_cmd+a","when":"editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'"},{"key":"ctrl+d","command":"extension.vim_ctrl+d","when":"editorTextFocus && vim.active && !inDebugRepl"},{"key":"ctrl+alt+down","linux":"shift+alt+down","mac":"cmd+alt+down","command":"extension.vim_cmd+alt+down","when":"editorTextFocus && vim.active && !inDebugRepl"},{"key":"ctrl+alt+up","linux":"shift+alt+up","mac":"cmd+alt+up","command":"extension.vim_cmd+alt+up","when":"editorTextFocus && vim.active && !inDebugRepl"},{"key":"Backspace","command":"extension.vim_backspace","when":"editorTextFocus && vim.active && !inDebugRepl"},{"key":"shift+backspace","command":"extension.vim_shift+backspace","when":"editorTextFocus && vim.active && vim.use<shift+BS> && vim.mode == 'SearchInProgressMode' && !inDebugRepl"},{"key":"Delete","command":"extension.vim_delete","when":"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl"},{"key":"tab","command":"extension.vim_tab","when":"editorFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl"},{"key":"ctrl+r","command":"extension.vim_ctrl+r","when":"editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"},{"key":"ctrl+f","command":"extension.vim_ctrl+f","when":"editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl"},{"key":"ctrl+b","command":"extension.vim_ctrl+b","when":"editorTextFocus && vim.active && vim.use<C-b> && vim.mode != 'Insert' && !inDebugRepl"},{"key":"ctrl+j","command":"extension.vim_ctrl+j","when":"editorTextFocus && vim.active && vim.use<C-j> && vim.mode != 'Insert' && !inDebugRepl"},{"key":"ctrl+k","command":"extension.vim_ctrl+k","when":"editorTextFocus && vim.active && vim.use<C-k> && vim.mode != 'Insert' && !inDebugRepl"},{"key":"ctrl+h","command":"extension.vim_ctrl+h","when":"editorTextFocus && vim.active && vim.use<C-h> && vim.mode == 'Insert' && !inDebugRepl"},{"key":"ctrl+e","command":"extension.vim_ctrl+e","when":"editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"},{"key":"ctrl+y","command":"extension.vim_ctrl+y","when":"editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl"},{"key":"ctrl+u","command":"extension.vim_ctrl+u","when":"editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl"},{"key":"ctrl+o","command":"extension.vim_ctrl+o","when":"editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"},{"key":"ctrl+i","command":"extension.vim_ctrl+i","when":"editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl"},{"key":"ctrl+v","command":"extension.vim_ctrl+v","when":"editorTextFocus && vim.active && vim.use<C-v> && vim.mode != 'Insert' && !inDebugRepl"},{"key":"cmd+v","command":"extension.vim_cmd+v","when":"editorTextFocus && vim.active && vim.use<D-v> && vim.mode == 'SearchInProgressMode' && !inDebugRepl"},{"key":"ctrl+[","command":"extension.vim_ctrl+[","when":"editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl"},{"key":"ctrl+]","command":"extension.vim_ctrl+]","when":"editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl"},{"key":"ctrl+w h","command":"extension.vim_navigateLeft","when":"vim.use<C-w> && vim.active && !editorTextFocus"},{"key":"ctrl+w l","command":"extension.vim_navigateRight","when":"vim.use<C-w> && vim.active && !editorTextFocus"},{"key":"ctrl+w ctrl+w","command":"extension.vim_navigateGroups","when":"vim.use<C-w> && vim.active && !editorTextFocus"},{"key":"ctrl+w j","command":"extension.vim_navigateDown","when":"vim.use<C-w> && vim.active && !editorTextFocus"},{"key":"ctrl+w k","command":"extension.vim_navigateUp","when":"vim.use<C-w> && vim.active && !editorTextFocus"},{"key":"ctrl+w","command":"extension.vim_ctrl+w","when":"editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"},{"key":"ctrl+c","command":"extension.vim_ctrl+c","when":"editorTextFocus && vim.active && vim.use<C-c> && !inDebugRepl && vim.overrideCtrlC"},{"key":"cmd+c","command":"extension.vim_cmd+c","when":"editorTextFocus && vim.active && vim.use<D-c> && vim.overrideCopy && !inDebugRepl"},{"key":"ctrl+a","command":"extension.vim_ctrl+a","when":"editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl"},{"key":"ctrl+n","command":"extension.vim_ctrl+n","when":"editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl"},{"key":"ctrl+p","command":"extension.vim_ctrl+p","when":"suggestWidgetVisible && vim.active && vim.use<C-p>"},{"key":"ctrl+x","command":"extension.vim_ctrl+x","when":"editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl"},{"key":"ctrl+shift+2","command":"extension.vim_ctrl+shift+2","when":"editorTextFocus && vim.active && vim.use<C-shift+2>"},{"key":"ctrl+t","command":"extension.vim_ctrl+t","when":"editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl"},{"key":"ctrl+pagedown","command":"extension.vim_ctrl+pagedown","when":"editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl"},{"key":"ctrl+pageup","command":"extension.vim_ctrl+pageup","when":"editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl"},{"key":"left","command":"extension.vim_left","when":"editorTextFocus && vim.active && !inDebugRepl"},{"key":"right","command":"extension.vim_right","when":"editorTextFocus && vim.active && !inDebugRepl"},{"key":"up","command":"extension.vim_up","when":"editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetVisible && !suggestWidgetMultipleSuggestions"},{"key":"down","command":"extension.vim_down","when":"editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetVisible && !suggestWidgetMultipleSuggestions"},{"key":"j","command":"list.focusDown","when":"listFocus && !inputFocus"},{"key":"k","command":"list.focusUp","when":"listFocus && !inputFocus"},{"key":"o","command":"list.toggleExpand","when":"listFocus && !inputFocus"},{"key":"g g","command":"list.focusFirst","when":"listFocus && !inputFocus"},{"key":"shift+G","command":"list.focusLast","when":"listFocus && !inputFocus"},{"key":"ctrl+d","command":"list.focusPageDown","when":"listFocus && !inputFocus"},{"key":"ctrl+u","command":"list.focusPageUp","when":"listFocus && !inputFocus"}],"configuration":{"title":"Vim Configuration","type":"object","properties":{"vim.otherModesKeyBindings":{"type":"array","description":"Remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more."},"vim.otherModesKeyBindingsNonRecursive":{"type":"array","description":"Non-recursive remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more."},"vim.useCtrlKeys":{"type":"boolean","description":"Enable some vim ctrl key commands that override otherwise common operations, like ctrl+c","default":true},"vim.leader":{"type":"string","description":"What key should <leader> map to in remappings?","default":"\\"},"vim.searchHighlightColor":{"type":"string","description":"Color of the search highlight.","default":"rgba(150, 150, 255, 0.3)"},"vim.useSystemClipboard":{"type":"boolean","description":"Use system clipboard for unnamed register.","default":false},"vim.overrideCopy":{"type":"boolean","description":"Override VSCode's copy command with our own copy command, which works better with VSCodeVim. Turn this off if copying is not working.","default":true},"vim.insertModeKeyBindings":{"type":"array","description":"Remapped keys in insert mode. Allows mapping to vim commands or vscode actions. See README for more."},"vim.insertModeKeyBindingsNonRecursive":{"type":"array","description":"Non-recursive keybinding overrides to use for insert mode. Allows mapping to vim commands or vscode actions. See README for more."},"vim.textwidth":{"type":"number","description":"Width to word-wrap to when using gq.","default":80},"vim.timeout":{"type":"number","description":"Timeout in milliseconds for remapped commands","default":1000},"vim.scroll":{"type":"number","description":"Number of lines to scroll with CTRL-U and CTRL-D commands.","default":20},"vim.showcmd":{"type":"boolean","description":"Show the text of any command you are in the middle of writing.","default":true},"vim.showmodename":{"type":"boolean","description":"Show the name of the current mode in the statusbar.","default":true},"vim.iskeyword":{"type":"string","description":"keywords contain alphanumeric characters and '_'","default":"/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-"},"vim.ignorecase":{"type":"boolean","description":"Ignore case in search patterns.","default":true},"vim.smartcase":{"type":"boolean","description":"Override the 'ignorecase' option if the search pattern contains upper case characters.","default":true},"vim.easymotion":{"type":"boolean","description":"Enable the EasyMotion plugin for Vim.","default":false},"vim.easymotionMarkerBackgroundColor":{"type":"string","description":"Set a custom background color for EasyMotion markers."},"vim.easymotionMarkerForegroundColorOneChar":{"type":"string","description":"Set a custom color for the text on one character long markers."},"vim.easymotionMarkerForegroundColorTwoChar":{"type":"string","description":"Set a custom color for the text on two character long markers."},"vim.easymotionMarkerWidthPerChar":{"type":"number","description":"Set the width (in pixels) allocated to each character in the match.","default":8},"vim.easymotionMarkerHeight":{"type":"number","description":"Set the height of the marker.","default":14},"vim.easymotionMarkerFontFamily":{"type":"string","description":"Set the font family of the marker text.","default":"Consolas"},"vim.easymotionMarkerFontSize":{"type":"string","description":"Set the font size of the marker text.","default":"14"},"vim.easymotionMarkerFontWeight":{"type":"string","description":"Set the font weight of the marker text.","default":"normal"},"vim.easymotionMarkerYOffset":{"type":"number","description":"Set the Y offset of the marker text (the distance from the top).","default":0},"vim.easymotionKeys":{"type":"string","description":"Set the characters used for jump marker name","default":"hklyuiopnm,qwertzxcvbasdgjf;"},"vim.surround":{"type":"boolean","description":"Enable the Surround plugin for Vim.","default":true},"vim.hlsearch":{"type":"boolean","description":"Show all matches of the most recent search pattern","default":false},"vim.incsearch":{"type":"boolean","description":"Show where a / search matches as you type it.","default":true},"vim.history":{"type":"number","description":"How much search or command history should be remembered","default":50},"vim.autoindent":{"type":"boolean","description":"Indent code automatically.","default":true},"vim.startInInsertMode":{"type":"boolean","description":"Start in Insert Mode."},"vim.handleKeys":{"type":"object","description":"Option to delegate certain key combinations back to VSCode to be handled natively"},"vim.statusBarColorControl":{"type":"boolean","description":"Allow VSCodeVim to change status bar color based on mode"},"vim.statusBarColors":{"type":"object","description":"Customize colors per mode when VSCodeVim controls status bar colors"},"vim.visualstar":{"type":"boolean","description":"In visual mode, start a search with * or # using the current selection","default":false},"vim.foldfix":{"type":"boolean","description":"Uses a hack to move around folds properly","default":false},"vim.mouseSelectionGoesIntoVisualMode":{"type":"boolean","description":"Does dragging with the mouse put you into visual mode","default":true},"vim.disableExtension":{"type":"boolean","description":"Disables the VSCodeVim extension.","default":false},"vim.enableNeovim":{"type":"boolean","description":"Use neovim on backend. (only works for Ex commands right now). You should restart VScode after enable/disabling this for the changes to take effect. NOTE: Neovim must be installed (v0.2.0) and neovimPath must be set the executable in order for this setting to work. Otherwise, vscodevim will crash.","default":false},"vim.neovimPath":{"type":"string","description":"Path to run neovim executable. For example, /usr/bin/nvim, or  C:\\Program Files\\Neovim\\bin\\nvim.exe","default":"nvim"},"vim.substituteGlobalFlag":{"type":"boolean","description":"Automatically apply the global flag, /g, to substitute commands. When set to true, use /g to mean only first match should be replaced.","default":false},"vim.cursorStylePerMode":{"type":"object","description":"Customize cursor style per mode"},"vim.cmdLineInitialColon":{"type":"boolean","description":"When typing a command show the initial colon ':' character","default":false}}}},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","test":"node ./node_modules/vscode/bin/test","postinstall":"node ./node_modules/vscode/bin/install && gulp init"},"dependencies":{"clipboardy":"^1.2.2","diff-match-patch":"^1.0.0","lodash":"^4.17.4","neovim-client":"^2.1.0","promised-neovim-client":"^2.0.2","untildify":"^3.0.2"},"devDependencies":{"@types/mocha":"^2.2.45","@types/node":"^8.5.2","gulp":"^3.9.1","gulp-bump":"^3.0.0","gulp-git":"^2.5.0","gulp-inject-string":"^1.1.0","gulp-shell":"^0.6.3","gulp-tag-version":"^1.3.1","gulp-tslint":"^8.1.2","gulp-typings":"^2.0.4","merge-stream":"^1.0.1","mocha":"^4.0.1","prettier":"^1.9.2","tslint":"^5.8.0","typescript":"^2.6.2","vscode":"^1.1.10"},"uuid":"d96e79c6-8b25-4be3-8545-0e0ecefcae03","isBuiltin":false,"id":"vscodevim.vim","extensionFolderPath":"/home/keyhoi/.vscode/extensions/vscodevim.vim-0.10.8"}]}